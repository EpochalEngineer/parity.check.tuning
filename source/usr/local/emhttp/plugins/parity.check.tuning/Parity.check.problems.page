Menu="About"
Title="Parity Problems Assistant"
Tag="gear"
---
<?PHP
/* Copyright 2021, Dave Walker (itimpi).
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *'
 * Limetech is given explicit permission to use this code in any way they like.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
// error_reporting(E_ALL);      // Enhanced error reporting for use when debugging

require_once '/usr/local/emhttp/webGui/include/Helpers.php';
require_once '/usr/local/emhttp/plugins/parity.check.tuning/parity.check.tuning.helpers.php';

// Multi-language support

$plugin = 'parity.check.tuning';
$translations = file_exists("$docroot/webGui/include/Translations.php");
// legacy support (with javascript)
$noscript = false;
require_once "$docroot/plugins/$plugin/Legacy.php";
loadVars(0);
parityProblemBuildSectorList();

// Build a list of sectors from syslog that have reported errors
// (Need to filter to latest date to remove old parity checks)
//
// Example syslog messages
// ~~~~~~~~~~~~~~~~~~~~~~~
// recovery thread: P corrected, sector=496
// recovery thread: P incorrect, sector=432

function parityProblemBuildSectorList() {
	parityTuningLoggerTesting('Scanning syslog for sectors corrected/incorrect');
    exec (escapeshellarg('cat /etc/log/syslog | fgrep "corrected, sector="', $results1));
	parityTuningLoggerTesting(count($results1) . ' entries for sectors corrected');
	exec (escapeshellarg('cat /etc/log/syslog | fgrep "incorrect, sector="', $results2));
	parityTuningLoggerTesting(count($results2) . ' entries for sectors incorrect');
	exec (escapeshellarg('cat /etc/log/syslog | fgrep -regex ".*recovery thread.*sector=.*"', $results3));
	parityTuningLoggerTesting(count($results3) . ' entries using regex');
}

?>
<?if (!$translations):?>
<?eval('?>'.parse_file("$docroot/plugins/" . PARITY_TUNING_PLUGIN . "/Parity.check.problems.page"))?>
<?else:?>
<? 
if ($parityTuningNoParity)     echo "<p class='notice'>" . _('No Parity disk present') . "</p>";
if (!$parityTuningRestartOK)   echo "<p class='notice'>" . _('Unraid 6.9.0 or later required to use this assistant') . "</p>"; 
if ($parityTuningActive) 
    echo "<p class='notice'>" . actionDescription($parityTuningAction, $parityTuningCorrecting) . ' ' .  _('running') . "</p>"; 
loadVars(0);
if ($parityTuningVar['mdState'] != 'STARTED') echo "<p class='notice'>" . _('Array must be started to use this assistant') . "</p>";

?>

<script>
var totalSectors = <?=$parityTuningSize?>;
var noParity = <?=($parityTuningNoParity ? 'true' : 'false')?>;

$(function() {
  if ( typeof caPluginUpdateCheck === "function" ) {
    caPluginUpdateCheck("parity.check.tuning.plg",{element:".pluginUpdate"});
  }
});

$(document).ready(function(){
  var oForm = document.getElementById('parityProblemPage');
  var active = <?=($parityTuningActive)?"true":"false"?>;
  var isDisabled = active || noParity;
  oForm.parityProblemType.disabled         = isDisabled;
  oForm.parityProblemStartSector.disabled  = isDisabled;  
  oForm.parityProblemStartPercent.disabled = isDisabled;  
  oForm.parityProblemEndSector.disabled    = isDisabled;  
  oForm.parityProblemEndPercent.disabled   = isDisabled;  
  oForm.parityProblemCorrect.disabled      = isDisabled;
  oForm.parityProblemCheck.disabled        = isDisabled;
  changeProblemType(oForm);
  // TODO: Investigate whether their is a more elegant/efficient solution than forcing page refreshes?
  if (active) setTimeout(refreshPage, 1000 * 30);
});

function refreshPage() {
    window.location.reload(true);
}

function changeProblemType(form) { 
    if (form.parityProblemType.value == "sector") {
        document.getElementById('parityProblemSectorStart').style.display  = "inline";
        document.getElementById('parityProblemSectorEnd').style.display    = "inline";
        document.getElementById('parityProblemPercentStart').style.display = "none";
        document.getElementById('parityProblemPercentEnd').style.display   = "none";
    } else {
        document.getElementById('parityProblemPercentStart').style.display = "inline";
        document.getElementById('parityProblemPercentEnd').style.display   = "inline";
        document.getElementById('parityProblemSectorStart').style.display  = "none";
        document.getElementById('parityProblemSectorEnd').style.display    = "none";
    }
}

function checkStartEnd(form) {
    var returnValue = true;
    var firstSector = parseInt(form.parityProblemStartSector.value);
    var lastSector  = parseInt(form.parityProblemEndSector.value);
    if (lastSector < firstSector) {
        swal({title: "_(End point too small)_",
              text: "_(The end point must be larger than the start)_.",
          icon:"Error"});
       returnValue = false;
    }
    if (lastSector > totalSectors) {
        swal({title: "_(End point too large)_",
              text: "_(The end has been set to more than the size of the disk)_.",
          icon:"Error"});
        returnValue = false;
    }
    form.parityProblemCheck.disabled = (returnValue == false);
    return returnValue;

}

function changeProblemStartSector(form) {
    var v = form.parityProblemStartSector.value / totalSectors * 100;
    updateIfChanged(form.parityProblemStartPercent, v.toFixed(1));
    checkStartEnd(form);
}

function updateIfChanged(fld, newVal) {
    if (fld.value != newVal) fld.value = newVal;
}

function changeProblemStartPercent(form) {
    var v1 = ((parseFloat(form.parityProblemStartPercent.value)) + 0.049).toFixed(1);
    updateIfChanged (form.parityProblemStartPercent, v1);
    var v2 = Math.floor(parseFloat(v1)/100 * totalSectors);
    updateIfChanged (form.parityProblemStartSector, v2);
    checkStartEnd(form);
}


function changeProblemEndSector(form) {
    var v = form.parityProblemEndSector.value / totalSectors * 100;
    updateIfChanged (form.parityProblemEndPercent, v.toFixed(1));
    checkStartEnd(form);
}

function changeProblemEndPercent(form) {
    var v1 = ((parseFloat(form.parityProblemEndPercent.value)) + 0.049).toFixed(1); 
    updateIfChanged (form.parityProblemEndPercent, v1);
    var v2 = Math.ceil(v1/100 * totalSectors);
    updateIfChanged (form.parityProblemEndSector, v2);
    checkStartEnd(form);
}

function startCheck(form) {
    if (checkStartEnd(form)) {
       (document.getElementById('parityProblemFile')).disabled = false;
       (document.getElementById('parityProblemCmd')).disabled  = false;
       (document.getElementById('parityProblemFile')).value = "<?=$parityTuningPhpFile?>";
       (document.getElementById('parityProblemCmd')).value  = "partial";
    }
}

</script>

<div class='pluginUpdate'></div>

<form   markdown = "1" 
        id       = "parityProblemPage"
        method   = "POST" 
        action   = "/update.php" 
        target   = "progressFrame">
        
<input type="hidden" 
       name="#file"    
       value="<?=PARITY_TUNING_CFG_FILE?>">      
<input type="hidden" 
       name="#command"
       disabled
       id = "parityProblemFile">
<input type="hidden"
       name="#arg[1]"
       disabled
       id = "parityProblemCmd">
 
_(The **Parity Problems Assistant** is part of the **Parity Check Tuning** plugin)_.

_(The current status is **EXPERIMENTAL** and it is always possible that this assistant may be removed in the future)_  
***_((feedback is welcomed on the basic concept and ideas for improvement)_***.

_(This assistant is intended to help pin down and resolve problems after a parity check has been run and errors have been reported)_.

_(The idea is that this assistant can be used after a parity check or read check has reported problems and logged the details of any problem sectors to the syslog)_.

_(In many cases such errors can be due to external factors such as cabling or the power supply rather than the actual disks)~.   
_(If you think you have rectified whatever caused the problems to occur then you can use this assistant to run a partial check over a narrow range to see if the problem still occurs)_.
_(This can be much faster than having to run a full parity check or read check to see if you have resolved the issue or to run a disk extended SMART test to test the actual disk)_. 

**_(IMPORTANT)_**:  _(This assistant should never be used as an alternative to running a full parity check once you think the problem has been resolved)_.

_(Method used to specify start and stop points)_:
: <input type="radio" 
        name="parityProblemType" 
        value="sector" 
        <?=($parityProblemType == "sector" ? "checked" : "") . "\n"?>
        onclick="changeProblemType(this.form)"> _(Sector Numbers)_
<input type="radio" 
        name="parityProblemType" 
        value="percent"
        <?=($parityProblemType == "percent" ? "checked" : "") . "\n"?>
        onclick="changeProblemType(this.form)"> _(Percentage)_

:parityProblems_type_plug:
> Select the way you want to specify the start and end points.
>
> You are likely to want to use absolute sector numbers if there are ones that have previously been listed in the syslog as being an error.
> Using absolute sector numbers tends to be more precise and lead to shorter tests but can be more effort to set up.
>
> The alternative is to use percentages.  When using percentages then the sector numbers these represent are calculated as percentages of the largest parity disk.
:end

_(Start point for check)_:
: <span id="parityProblemSectorStart">
<input type="text"
         size='1' class='narrow'
         name="parityProblemStartSector"
         value="<?=$parityProblemStartSector?>"
         onchange="changeProblemStartSector(this.form)"> _(sector)_ 
         </select>
</span>
<span id="parityProblemPercentStart">
<input type="text"
         size='1' class='narrow'
         name="parityProblemStartPercent"
         value="<?=$pparityProblemStartPercent?>"
         onchange="changeProblemStartPercent(this.form)"> _(percent)_
</span>

:parityProblems_start_plug:
> Select where you want the check to be started from.  You can specify the start point as either a sector number or as a percentage of the size of the largest parity disk.
>
> Specifying absolute sectors is likely to be of particular use when you have extracted the sector numbers from the *syslog* when the original parity check reported errors on those sectors. In a future version of this plugin the plugin may be enhanced to automatically extract such sectors from the *syslog* and give you a drop down list but this feature is not yet implemented.
>
> In practice for technical reasons the check may start slightly earlier than the point you specify, but this will only be by a small amount.
:end

_(End point for check)_:
: <span id="parityProblemSectorEnd">
<input type="text"
         size='1' class='narrow'
         name="parityProblemEndSector"
         value="<?=$parityProblemEndSector?>"
         onchange="changeProblemEndSector(this.form)"> _(sector)_
</span>
<span id="parityProblemPercentEnd">
<input type="text"
         size='1' class='narrow'
         name="parityProblemEndPercent"
         value="<?=$parityProblemEndPercent?>"
         onchange="changeProblemEndPercent(this.form)"> _(percent)_
</span>

:parityProblems_end_plug:
> Select where you want the check to be ended.  You can specify the start point as either a sector number or as a percentage of the size of the largest parity disk.
>
> In practice for technical reasons the check may end later than the point you specify as a check is only made once a minute to see if the end point has been reached.
:end

_(Write Corrections to Parity)_:
: <select name="parityProblemCorrect" 
          size='1' class='narrow'>
    <?=mk_option($parityProblemCorrect, "0", _("No")) . "\n"?>
    <?=mk_option($parityProblemCorrect, "1", _("Yes")) . "\n"?>
  </select>


:parityProblems_correct_plug:
> Specify whether you want to attempt to update parity to correct any error found,
> or just do a read test to see if any parity errors are reported.
:end


&nbsp; <!--  This is to have a dummy field so buttons are correctly aligned --> 

: <input type="submit" 
     value="_(Start Check)_" 
     id="parityProblemCheck"
     onclick="startCheck(this.form)">
     
&nbsp; <!--  This is to have a dummy field so buttons are correctly aligned --> 

: <input type="submit" 
     name="#apply" 
     value="_(Apply)_" 
     id='Apply'>
<input type="button" 
     id="DONE" 
     value="_(Done)_"
     onclick="done()"><a style='float:right' href='https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=U2FVNHSETTNRG' target='_blank'><img src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" title="_(Donate to plugin author)_"></a>
</form>

<?endif;?>
